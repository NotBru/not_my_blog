Intro a la programación con python: Capítulo 1: Una introducción a esto
#######################################################################

:date: 2021-12-11
:tags: python, programación, tutoriales
:category: Pythorial
:author: Bru
:slug: pythorial-1
:lang: ñl

Bueno, bueno, ya era hora de otro post, ¿no? Sin embargo, para lamento de les amantes de mis delirios, este va a ser el comienzo de un tuto medio básico que quiero hacer de programación (principalmente Python). ¿Por qué? Porque no recuerdo de dónde aprendí Python, pero seguro fue en inglés, y ya sabía C++ de antemano, así que probablemente fui manoteando conocimiento. Y ya más de una persona que me cuenta que quiere aprender Python no se super maneja con el inglés, y me da paja ir averiguando de segunda mano qué tutorial en español ta bueno. En fin, me lo armo.

Está el `tutorial en la documentación oficial de Python <https://docs.python.org/3/tutorial/>`_, pero capaz como primer abordaje a la programación, para mucha gente es un poco mucho. Yo voy a tratar de ir desde lo más básico que me dé la paciencia, con tal de que sirva para que sin nada de trasfondo, igual puedan meterse. Si me sale bien, obvio. Son bienvenides a introducir correcciones a través de mi repo en Git, o cualquier otro método de contacto. Todos se encuentran en la cosa esa de `Contactame <http://deftlynot.me/pages/contactame-%C3%B1l.html>`_ que hay arriba a la izquierda.

Va a estar dividido en secciones, de modo que puedas saltearte las que no te sirvan. De última volvé para arriba si te faltó algo que dí antes. Este capítulo, como dice el título, es una introducción a esto. Vas a ver que al final voy a ir poniendo un link a cada capítulo siguiente, y en esta página en particular un link a cada capítulo que vaya haciendo.

Programar
---------

Buo, para empezar, ¿de qué va programar? Va de hacer que la compu sepa hacer lo que queremos. Para entender qué queremos, es útil pensar en cómo usamos la compu o el celu. Normalmente miramos una pantalla para saber en qué andamos, o sea, para recibir información. Luego a través de un teclado, o una pantalla táctil, le vamos dando instrucciones a la cosa, de qué queremos que haga; o sea, mandamos información. Y así se puede establecer un lindo intercambio... `siempre y cuando se llame Esther <https://www.youtube.com/watch?v=ptorPqV7D5s>`_.

Bueno, a la información que se le mete a la compu se le dice “la entrada”, y la que sale se le dice “la salida”. Bueno, programar es enseñarle a la compu a producir la salida que queremos según la entrada. Vos hacés click en cositas en FB (entrada), y FB te tira fotitos de gente linda (salida). Vos le vas apretando las teclitas WASD y clicks (entrada) y la compu te avisa que te re cagaron a tiros (salida). Pero ¿cómo sabe que te recagaron a tiros?¿cómo sabe la compu de PepeTuVieja325 que te ganó?

Bueno, para transformar entrada en salida, la compu hace cuentitas por dentro. A veces chorrocientas. Por ejemplo, una manera de saber si te pegaron un tiro en el counter puede involucrar fijarse dónde estaba apuntando el personaje, proyectar una línea, y ver qué interseca primero: una pared, un adversario, el final del mapa. Luego decide “Si intersecó una pared, dibujame un tirito. Si intersecó al hombro de Juanito substraele 25 de vida a Juanito y dibujame sangresita”. Esa última horación tiene un ejemplo de control de flujo: cuando haga falta, podemos decidir qué instrucciones ejecutar dependiendo de qué pasó antes.

Van a ver que es re divertido.

Lenguajes de programación, compiladores, y por qué Python.
----------------------------------------------------------

Hay muchas cosas que uno puede querer programar. Desde videojuegos, páginas web, módulos que viajan en exploradores espaciales y definen hacia dónde y cómo se mueven las sondas. Y según con qué estemos trabajando, existe un “lenguaje natural” en el que pensamos las cosas. Por ejemplo, para diseñar páginas web queremos pensar en botones, cuadritos, imágenes, animaciones. Pero para diseñar un reproductor de video (que puede luego reproducir algo en una página web) nos van a interesar pixeles, frecuencias, qué se yo. Para hacer ciencia queremos pensar en vectores, ecuaciones, y qué se yo qué cuartos.

Por eso se terminan diseñando distintos *lenguajes de programación*, que apuntan a atender distintas necesidades.

Lenguajes de programación según el nivel
========================================

A los lenguajes de programación se los suele clasificar primero que nada en “bajo nivel” y “alto nivel”. Podemos pensar a la compu como un barquito, con los mecanismos para el funcionamiento abajo de todo, y los aspectos más superficiales, en la superficie, dah.

Los lenguajes de más bajo nivel son los lenguajes Assembly (o Assembler). En esos lenguajes, las palabras que se usan se corresponden directamente con instrucciones del microprocesador. “Poneme tal cosa en tal registro de memoria”. “Saltá de esta línea a esta otra”. Las palabras se traducen una por una a código máquina, el más más bajo de los niveles. O sea, son sólo un poco de azuquita arriba del barro que es el funcionamiento interno de los procesadores. Encima, como los procesadores difieren entre sí, hay distintos lenguajes Assembly según arquitectura y qué se yo. No estudié ingeniería, no tengo por qué saber esto.

Luego tenemos lenguajes de mediano nivel, que son como los de bajo nivel pero un poco más ubicados, como el glorioso C. C es la continuación de B (no, posta), ambos lenguajes que hicieron en Bell Labs. Es un lenguaje de más alto nivel que Assembly porque *abstrae* todos los detalles del procesador, y te permite lidiar con elementos que son comunes a todas las computadoras. Sumar cosas, juntar código dentro de un bloque para reutilizarlo pero muy cómodamente. Pero sigue incorporando posibilidades como acceder a la memoria directamente.

O sea, podés escribir código que se mande macanas tranquilamente. Pero todo sistema operativo decente lo que hace es no dejarte acceder bloques de memoria que no son tuyos; hablame de `propiedad privada <https://www.youtube.com/watch?v=q1qGa1o53pQ>`_. Pero la posibilidad, en el lenguaje está.

Si ves esta línea, acá va el meme de Python vs. C de Kawabunga it is. Porfa haceme acordar, así lo subo.

Por cierto, existe una “biblia de C++”, `The C Programming Language <https://www.engr.colostate.edu/ECE251/References/The%20C%20Programming%20Language.pdf>`_ de Kernighan & Ritchie. Recomiendo fuertemente aprender C, y ese libro está bueno.

Ahora, los procesadores sólo entienden su lenguaje, ¿no? Bueno, lo que uno hace con lenguajes de mediano y alto nivel es *compilarlos o interpretarlos*. Ya vamos a hablar de eso, pero la clave es que los lenguajes entendibles siempre tienen un paso de “traducción”, para que el procesador sepa qué mierda hacer. O sea no le podés decir “dibujame un chabón”, bro. No te entiende.

Luego tenemos los llamados lenguajes de alto nivel. Estos abstraen detalles del manejo de memoria interna, dejándote decir cosas lindas como “haceme una lista para guardar 10 cosas... ah no, pará, mejor hacela del doble de tamaño” sin tener que llamar a tus padres o llorar en una esquina. Ejemplos de ellos son C++, Haskell, Julia, y Python.

Paradigmas de programación
==========================

Los lenguajes también se dividen por “cómo pensamos cuando programamos”. ¿Cómo es eso? El paradigma más usual es la programación imperativa, donde uno da instrucciones, y luego esas instrucciones se ejecutan. Por ejemplo, si quisieramos calcular el peso total dentro de un ascensor, podríamos decirle a la computadora: “agarrá la persona 1, y sumale el peso de la persona 2, y sumale el peso de la persona 3... hasta que no tengas más personas”.

Este paradigma permite agrupar instrucciones comunes dentro de una cosa que voy a explicar luego que se llaman funciones. Entonces, si a menudo necesitamos saber el peso del ascensor, metemos ese código en una función que se llame “sumar_pesos” y yatá, después reutilizamos ese código una y otra vez.

Luego está la programación orientada a objetos. En ella, podemos agrupar comportamientos en objetos. Por ejemplo, habría un objeto “ascensor” que encapsula todo el código pertinente a cómo funciona un ascensor, un objeto “persona”, y tal. Y luego podríamos pedirle al ascensor que se fije si puede arrancar, o si debería señalizar que alguien se tiene que bajar.

Todo esto igual lo vamos a revisitar en la medida en la que sepamos escribir código. Es más fácil entenderlo cuando sabés codear.

Hay otros, como programación funcional, que son un toque más raro. La programación funcional, por ejemplo, se aleja un poco más de la noción de “dar instrucciones”, que es la forma típica de trabajar de un procesador, y se parece mucho más a la forma en la que se trabaja en matemática: definís cosas, y luego pedís resultados.

¿Por qué Python?
================

Python es un lenguaje de alto nivel, orientado a objetos, que toma elementos de lenguajes de programación funcionales. Es un híbrido, receptor de muchas muchas críticas, muchas fundamentadas. Pero lo que tiene es que permite hacer cosas que funcionen muy rápidamente. Esto tiene sus desventajas, sí, pero para una persona que recién está aprendiendo está bastante bueno. Parte de las desventajas de eso último, por ejemplo, es que “es fácil programar” pero “es difícil programar bien”. Hay mucho de programar código rápido que depende de entender cómo funciona la computadora de fondo, y los lenguajes “fáciles”, al abstraer mucho, te permiten mandarte macanas.

Yo recomiendo mucho aprender algo como C y C++, porque dan una buena idea de qué pasa de fondo. Pero podés aprenderlo después ¿Nop? Para C++ recomiendo infinitamente `LearnCpp <http://www.learncpp.com>`_. Es un tutorial gratuito que explica pero de bien...

El camino a seguir
------------------

#. `Una introducción a esto <pythorial-1-%C3%B1l.html>`_
#. La terminal uwu
#. Instalando Python
#. Hacer cuentas como mono al ritmo de la batería de guerra
